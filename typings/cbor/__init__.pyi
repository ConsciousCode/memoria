from typing import Optional
import io

class Tag[T]:
    tag: Optional[int]
    value: Optional[T]

    def __init__(self, tag: Optional[int]=None, value: Optional[T]=None): ...

def dumps_int(val: int) -> bytes: ...
def dumps_float(val: float) -> bytes: ...
def dumps_string(val: str, is_text: Optional[bool]=None, is_bytes: Optional[bool]=None): ...
def dumps_array(arr: list, sort_keys=False) -> bytes: ...
def dumps_dict(d: dict, sort_keys=False) -> bytes: ...
def dumps_bool(b: bool) -> bytes: ...
def dumps_tag(t: Tag, sort_keys=False) -> bytes: ...
def dumps(ob, sort_keys=False) -> bytes: ...
def dump(obj, fp: io.IOBase, sort_keys=False) -> None: ...

def loads(data: str) -> object: ...
def load(fp: io.IOBase) -> object: ...
def loads_bytes(fp: io.IOBase, aux: Optional[int], btag: bytes=b'') -> tuple[bytes, int]: ...

def tagify(ob, aux: int) -> Tag: ...